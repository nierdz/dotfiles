---
- name: Configure ~/.config/kitty/kitty.conf
  ansible.builtin.template:
    src: .config/kitty/kitty.conf.j2
    dest: ~/.config/kitty/kitty.conf
    mode: 0644

- name: Check binaries versions
  ansible.builtin.shell: >
    set -o pipefail;
    /usr/local/bin/{{ item.value.check }} | head -n 1
  args:
    executable: "{{ lookup('ansible.builtin.env', 'SHELL') }}"
  failed_when: false
  changed_when: false
  register: current_binaries_versions
  loop: "{{ binaries | dict2items }}"

- name: Download binaries if needed
  become: true
  ansible.builtin.get_url:
    url: "{{ item.item.value.url }}"
    dest: "/usr/local/bin/{{ item.item.value.name }}"
    force: true
    mode: 0755
    owner: root
    group: '{% if ansible_distribution == "MacOSX" %}wheel{% else %}root{% endif %}'
  loop: "{{ current_binaries_versions.results }}"
  when: item.stdout is not search(item.item.value.version)

- name: Check archived binaries versions
  ansible.builtin.shell: >
    set -o pipefail;
    /usr/local/bin/{{ item.value.check }} | head -n 1
  args:
    executable: "{{ lookup('ansible.builtin.env', 'SHELL') }}"
  failed_when: false
  changed_when: false
  register: current_archived_binaries_versions
  loop: "{{ archived_binaries | dict2items }}"

- name: Download archived binaries if needed
  become: true
  ansible.builtin.unarchive:
    src: "{{ item.item.value.url }}"
    dest: /usr/local/bin
    remote_src: true
    mode: 0755
    owner: root
    group: '{% if ansible_distribution == "MacOSX" %}wheel{% else %}root{% endif %}'
    extra_opts: "{{ item.item.value.extra_opts | default(omit) }}"
  loop: "{{ current_archived_binaries_versions.results }}"
  when: item.stdout is not search(item.item.value.version)

- name: Create starship config
  ansible.builtin.template:
    src: .config/starship.toml.j2
    dest: ~/.config/starship.toml
    mode: 0644

- name: Create global git config
  ansible.builtin.template:
    src: .gitconfig.j2
    dest: ~/.gitconfig
    mode: 0644

- name: Create golang directory
  ansible.builtin.file:
    path: "~/go"
    state: directory
    mode: 0755

- name: Install evil chrome
  become: true
  ansible.builtin.apt:
    deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  when:
    - ansible_distribution != "MacOSX"
    - '"google-chrome-stable" not in ansible_facts.packages'

- name: Add spotify GPG key
  become: true
  ansible.builtin.get_url:
    url: https://download.spotify.com/debian/pubkey_C85668DF69375001.gpg
    dest: /etc/apt/trusted.gpg.d/spotify.asc
    mode: 0644
    owner: root
    group: root
  when: ansible_distribution != "MacOSX"

- name: Add spotify repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/spotify.asc] http://repository.spotify.com stable non-free"
    state: present
    filename: spotify
    update_cache: true
  when: ansible_distribution != "MacOSX"

- name: Install spotify
  become: true
  ansible.builtin.apt:
    name: spotify-client
    state: present
    update_cache: true
  when:
    - ansible_distribution != "MacOSX"
    - '"spotify-client" not in ansible_facts.packages'

- name: Add docker GPG key
  become: true
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/debian/gpg
    dest: /etc/apt/trusted.gpg.d/docker.asc
    mode: 0644
    owner: root
    group: root
  when: ansible_distribution != "MacOSX"

- name: Add docker repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/debian bookworm stable"
    state: present
    filename: docker
    update_cache: true
  when: ansible_distribution != "MacOSX"

- name: Install docker
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  when:
    - ansible_distribution != "MacOSX"
    - '"docker-ce" not in ansible_facts.packages'

- name: Add to docker group the user {{ lookup('env', 'USER') }}
  become: true
  ansible.builtin.user:
    name: "{{ lookup('env', 'USER') }}"
    groups: docker
    append: true
  when: ansible_distribution != "MacOSX"

- name: Create docker plugins folder
  ansible.builtin.file:
    state: directory
    path: ~/.docker/cli-plugins
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: 0755
  when: ansible_distribution != "MacOSX"

- name: Check docker compose version
  ansible.builtin.shell: >
    set -o pipefail;
    docker compose version | cut -f 4 -d " "
  args:
    executable: "{{ lookup('ansible.builtin.env', 'SHELL') }}"
  failed_when: false
  changed_when: false
  register: current_docker_compose_version
  when: ansible_distribution != "MacOSX"

- name: Install docker-compose as a docker plugin
  ansible.builtin.get_url:
    url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
    dest: ~/.docker/cli-plugins/docker-compose
    force: true
    mode: 0755
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
  when:
    - ansible_distribution != "MacOSX"
    - current_docker_compose_version.stdout != docker_compose_version

- name: Create ~/.yamllint.yml configuration file
  ansible.builtin.template:
    src: .yamllint.yml.j2
    dest: ~/.yamllint.yml
    mode: 0644

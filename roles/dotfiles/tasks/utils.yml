---
- name: Configure /etc/apt/preferences
  become: true
  ansible.builtin.template:
    src: etc/apt/preferences.j2
    dest: /etc/apt/preferences
    mode: 0644
    owner: root
    group: root
  notify:
    - apt update

- name: Configure /etc/apt/sources.list
  become: true
  ansible.builtin.template:
    src: etc/apt/sources.list.j2
    dest: /etc/apt/sources.list
    mode: 0644
    owner: root
    group: root
  notify:
    - apt update

- name: Remove useless packages
  become: true
  ansible.builtin.apt:
    name: firefox-esr
    state: absent

- name: Inject packages list in ansible_facts
  ansible.builtin.package_facts:
    manager: "auto"

- name: Install firefox from unstable repository
  become: true
  ansible.builtin.apt:
    name: firefox
    state: present
    update_cache: true
    default_release: unstable
  when: '"firefox" not in ansible_facts.packages'

- name: Install useful packages
  become: true
  ansible.builtin.apt:
    name: "{{ useful_packages }}"
    state: present
    update_cache: true

- name: Configure ~/.config/kitty/kitty.conf
  ansible.builtin.template:
    src: .config/kitty/kitty.conf.j2
    dest: ~/.config/kitty/kitty.conf
    mode: 0644

- name: Check binaries versions
  ansible.builtin.shell: >
    set -o pipefail;
    /usr/local/bin/{{ item.value.check }} | head -n 1
  args:
    executable: /usr/bin/bash
  failed_when: false
  changed_when: false
  register: current_binaries_versions
  loop: "{{ binaries | dict2items }}"

- name: Download binaries if needed
  become: true
  ansible.builtin.get_url:
    url: "{{ item.item.value.url }}"
    dest: "/usr/local/bin/{{ item.item.value.name }}"
    force: true
    mode: 0755
    owner: root
    group: root
  loop: "{{ current_binaries_versions.results }}"
  when: item.stdout is not search(item.item.value.version)

- name: Check archived binaries versions
  ansible.builtin.shell: >
    set -o pipefail;
    /usr/local/bin/{{ item.value.check }} | head -n 1
  args:
    executable: /usr/bin/bash
  failed_when: false
  changed_when: false
  register: current_archived_binaries_versions
  loop: "{{ archived_binaries | dict2items }}"

- name: Download archived binaries if needed
  become: true
  ansible.builtin.unarchive:
    src: "{{ item.item.value.url }}"
    dest: /usr/local/bin
    remote_src: true
    mode: 0755
    owner: root
    group: root
  loop: "{{ current_archived_binaries_versions.results }}"
  when: item.stdout is not search(item.item.value.version)

- name: Create starship config
  ansible.builtin.template:
    src: .config/starship.toml.j2
    dest: ~/.config/starship.toml
    mode: 0644

- name: Create global git config
  ansible.builtin.template:
    src: .gitconfig.j2
    dest: ~/.gitconfig
    mode: 0644

- name: Create golang directory
  ansible.builtin.file:
    path: "~/go"
    state: directory
    mode: 0755

- name: Install evil chrome
  become: true
  ansible.builtin.apt:
    deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  when: '"google-chrome-stable" not in ansible_facts.packages'

- name: Add spotify apt-key
  become: true
  ansible.builtin.apt_key:
    url: https://download.spotify.com/debian/pubkey_7A3A762FAFD4A51F.gpg
    state: present

- name: Add spotify repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb http://repository.spotify.com stable non-free"
    state: present
    filename: spotify
    update_cache: true

- name: Install spotify
  become: true
  ansible.builtin.apt:
    name: spotify-client
    state: present
    update_cache: true
  when: '"spotify-client" not in ansible_facts.packages'

- name: Add docker apt-key
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present

- name: Add docker repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_facts['distribution_release'] }} stable"
    state: present
    filename: docker
    update_cache: true

- name: Install docker
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  when: '"docker-ce" not in ansible_facts.packages'

- name: Add to docker group the user {{ lookup('env', 'USER') }}
  become: true
  ansible.builtin.user:
    name: "{{ lookup('env','USER') }}"
    groups: docker
    append: true

- name: Create docker plugins folder
  ansible.builtin.file:
    state: directory
    path: ~/.docker/cli-plugins
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
    mode: 0755

- name: Check docker compose version
  ansible.builtin.shell: >
    set -o pipefail;
    docker compose version | cut -f 4 -d " "
  args:
    executable: /usr/bin/bash
  failed_when: false
  changed_when: false
  register: current_docker_compose_version

- name: Install docker-compose as a docker plugin
  ansible.builtin.get_url:
    url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
    dest: ~/.docker/cli-plugins/docker-compose
    force: true
    mode: 0755
    owner: "{{ lookup('env', 'USER') }}"
    group: "{{ lookup('env', 'USER') }}"
  when: current_docker_compose_version.stdout != docker_compose_version

- name: Configure ssh client
  ansible.builtin.template:
    src: .ssh/config.j2
    dest: ~/.ssh/config
    mode: 0600

- name: Create ~/.yamllint.yml configuration file
  ansible.builtin.template:
    src: .yamllint.yml.j2
    dest: ~/.yamllint.yml
    mode: 0644

- name: Setup splash screen
  become: true
  ansible.builtin.lineinfile:
    dest: /etc/default/grub
    regexp: "^GRUB_CMDLINE_LINUX_DEFAULT=.*"
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"'
  notify:
    - update-grub

- name: Let me use Control+Shift+E please !
  ansible.builtin.command: gsettings set org.freedesktop.ibus.panel.emoji hotkey "['<Control><Shift>j']"
  changed_when: false

- name: Configure nautilus bookmarks (global)
  become: true
  ansible.builtin.template:
    src: etc/xdg/user-dirs.defaults.j2
    dest: /etc/xdg/user-dirs.defaults
    mode: 0644
    owner: root
    group: root

- name: Configure nautilus bookmarks (user)
  ansible.builtin.template:
    src: .config/user-dirs.dirs.j2
    dest: ~/.config/user-dirs.dirs
    mode: 0644

- name: Configure NetworkManager to handle ethernet card
  become: true
  ansible.builtin.replace:
    path: /etc/NetworkManager/NetworkManager.conf
    regexp: '^\[ifupdown\]\nmanaged=[a-z]*$'
    replace: '[ifupdown]\nmanaged=true'
  notify:
    - restart networkmanager

- name: Remove default gnome folders
  ansible.builtin.file:
    path: "~/{{ item }}"
    state: absent
  with_items:
    - Desktop
    - Documents
    - Music
    - Pictures
    - Public
    - Templates
    - Videos

- name: Configure bind9 options
  become: true
  ansible.builtin.template:
    src: etc/bind/named.conf.options.j2
    dest: /etc/bind/named.conf.options
    owner: root
    group: bind
    mode: 0644
  notify:
    - restart bind9

- name: Start bind9 at boot
  become: true
  ansible.builtin.service:
    name: named
    enabled: true
    state: started

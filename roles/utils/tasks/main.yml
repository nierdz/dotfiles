---
- name: Configure /etc/apt/preferences
  become: true
  template:
    src: etc/apt/preferences.j2
    dest: /etc/apt/preferences
    mode: 0644
    owner: root
    group: root
  notify:
    - apt update

- name: Configure /etc/apt/sources.list
  become: true
  template:
    src: etc/apt/sources.list.j2
    dest: /etc/apt/sources.list
    mode: 0644
    owner: root
    group: root
  notify:
    - apt update

- name: Remove useless packages
  become: true
  apt:
    name: firefox-esr
    state: absent

- name: Install firefox from unstable repository
  become: true
  apt:
    name: firefox
    state: present
    update_cache: true
    default_release: unstable
  register: firefox_installed
  until: firefox_installed is success
  retries: 10
  delay: 2

- name: Install useful packages
  become: true
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: true
  register: packages_installed
  until: packages_installed is success
  retries: 10
  delay: 2

- name: Install useful binaries
  become: true
  get_url:
    url: "{{ item.value }}"
    dest: "/usr/local/bin/{{ item.key }}"
    force: true
    mode: 0755
    owner: root
    group: root
  with_dict: "{{ binaries }}"

- name: Check startship version # noqa 306
  shell: >
    startship --version 2>/dev/null |
    grep -o {{ starship_version }}
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: current_starship_version

- name: Download starship if needed
  become: true
  unarchive:
    src: "https://github.com/starship/starship/releases/download/v{{ starship_version }}/starship-x86_64-unknown-linux-gnu.tar.gz"
    dest: "/tmp"
    remote_src: true
  register: starship_downloaded
  when: current_starship_version.stdout != starship_version

- name: Install starship if needed
  become: true
  copy:
    src: /tmp/starship
    dest: /usr/local/bin/starship
    mode: 0755
    owner: root
    group: root
  when: starship_downloaded is changed

- name: Create starship config
  template:
    src: .config/starship.toml.j2
    dest: ~/.config/starship.toml
    mode: 0644

- name: Check Terraform version # noqa 306
  shell: >
    terraform --version |
    head -n1 |
    grep -o {{ terraform_version }}
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: current_terraform_version

- name: Install Terraform if needed
  become: true
  unarchive:
    src: "https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: true
    mode: 0755
    owner: root
    group: root
  when: current_terraform_version.stdout != terraform_version

- name: Check Packer version # noqa 306
  shell: >
    packer --version |
    head -n1 |
    grep -o {{ packer_version }}
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: current_packer_version

- name: Install Packer if needed
  become: true
  unarchive:
    src: "https://releases.hashicorp.com/packer/{{ packer_version }}/packer_{{ packer_version }}_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: true
    mode: 0755
    owner: root
    group: root
  when: current_packer_version.stdout != packer_version

- name: Check tflint version # noqa 306
  shell: >
    terraform --version |
    grep -o {{ tflint_version }}
  args:
    executable: /bin/bash
  failed_when: false
  changed_when: false
  register: current_tflint_version

- name: Install tflint if needed
  become: true
  unarchive:
    src: "https://github.com/terraform-linters/tflint/releases/download/v{{ tflint_version }}/tflint_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: true
    mode: 0755
    owner: root
    group: root
  when: current_tflint_version.stdout != tflint_version

- name: Install useful gems
  gem:
    name: "{{ item.key }}"
    version: "{{ item.value }}"
    state: present
  with_dict: "{{ gems }}"

- name: Create global git config
  template:
    src: .gitconfig.j2
    dest: ~/.gitconfig
    mode: 0644

- name: Create golang directory
  file:
    path: "~/go"
    state: directory
    mode: 0755

- name: Add gcloud sdk apt-key
  become: true
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  register: gcloud_key_installed
  until: gcloud_key_installed is success
  retries: 10
  delay: 2

- name: Add gcloud sdk repository
  become: true
  apt_repository:
    repo: "deb http://packages.cloud.google.com/apt cloud-sdk-buster main"
    state: present
    filename: google-cloud-sdk
    update_cache: true
  notify:
    - apt update

- name: Install gcloud sdk
  become: true
  apt:
    name: google-cloud-sdk={{ google_cloud_sdk_version }}
    state: present
    update_cache: true
  register: gcloud_installed
  until: gcloud_installed is success
  retries: 10
  delay: 2

- name: Install kubectl
  become: true
  apt:
    name: kubectl={{ kubectl_version }}
    state: present
    update_cache: true
  register: packages_installed
  until: packages_installed is success
  retries: 10
  delay: 2

- name: Install evil chrome
  become: true
  apt:
    deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  register: chrome_installed
  until: chrome_installed is success
  retries: 10
  delay: 2

- name: Install dive
  become: true
  apt:
    deb: https://github.com/wagoodman/dive/releases/download/v{{ dive_version }}/dive_{{ dive_version }}_linux_amd64.deb
  register: dive_installed
  until: dive_installed is success
  retries: 10
  delay: 2

- name: Add spotify apt-key
  become: true
  apt_key:
    url: https://download.spotify.com/debian/pubkey.gpg
    state: present
  register: spotify_key_installed
  until: spotify_key_installed is success
  retries: 10
  delay: 2

- name: Add spotify repository
  become: true
  apt_repository:
    repo: "deb http://repository.spotify.com stable non-free"
    state: present
    filename: spotify
    update_cache: true
  notify:
    - apt update

- name: Install spotify
  become: true
  apt:
    name: spotify-client
    state: present
    update_cache: true
  register: spotify_installed
  until: spotify_installed is success
  retries: 10
  delay: 2

- name: Add docker apt-key
  become: true
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present
  register: docker_key_installed
  until: docker_key_installed is success
  retries: 10
  delay: 2

- name: Add docker repository
  become: true
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian buster stable"
    state: present
    filename: docker
    update_cache: true
  notify:
    - apt update

- name: Install docker
  become: true
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  register: docker_installed
  until: docker_installed is success
  retries: 10
  delay: 2

- name: Add {{ lookup('env','USER') }} to group docker
  become: true
  user:
    name: "{{ lookup('env','USER') }}"
    groups: docker
    append: true

- name: Configure ssh client
  template:
    src: .ssh/config.j2
    dest: ~/.ssh/config
    mode: 0600

- name: Install pip packages
  pip:
    name: "{{ pip_packages }}"
    executable: /usr/bin/pip3

- name: Create ~/.yamllint.yml configuration file
  template:
    src: .yamllint.yml.j2
    dest: ~/.yamllint.yml
